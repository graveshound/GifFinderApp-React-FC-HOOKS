{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifFinderApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","log","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifFinderApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,uBAAMC,SAbS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GACxBC,QAAQC,IAAI,gBACZV,GAAc,SAACW,GAAD,OAAST,GAAT,mBAAuBS,OACrCR,EAAc,KAEdM,QAAQC,IAAI,iBAMhB,UACI,gDACA,uBACIE,KAAK,OACLC,MAAOX,EACPY,SArBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,UAqBnB,6CAAgBX,S,+BCzBfc,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGkCC,UAAUH,GAH5C,kBAFP,IAEO,oBAHT,oCAGS,SAKII,MAAMF,GALV,cAKTG,EALS,gBAMKA,EAAKC,OANV,uBAMRC,EANQ,EAMRA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAZ1B,kBAgBRM,GAhBQ,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKP,IACpB,4BAAIC,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDb,SAACA,GAAY,IAAD,EAGRhB,mBAAS,CAE/BuB,KAAK,GACLa,SAAQ,IANsB,mBAG3BC,EAH2B,KAGpBC,EAHoB,KA2BlC,OAlBCC,qBAAU,WACRxB,EAAQC,GACPwB,MAAK,SAAAC,GAELC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAGZ,UAIN,CAACpB,IAIIqB,EDnByBM,CAAa3B,GAAhCa,EAPsB,EAO3BN,KAAYa,EAPe,EAOfA,QAKpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAEHA,GADCA,EAAIC,aEpBpBiB,EAAe,WAAM,MAGG5C,mBAAS,CAAC,YAHb,mBAGvB6C,EAHuB,KAGZ9C,EAHY,KAY9B,OADAS,QAAQC,IAAIoC,GAER,qCACI,gDACA,cAAC,EAAD,CAAa9C,cAAgBA,IAE7B,uBAEA,6BAEQ8C,EAAWpB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CACAA,SAAUA,GACLA,Y,MCvB7B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.cb65b70b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue]=useState('')\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            console.log('Submit hecho')\r\n            setCategories((cats)=>[inputValue,...cats])\r\n            setInputValue('');\r\n        }else{\r\n            console.log('Escribe Algo')\r\n        }\r\n      \r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2> Add Category </h2>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange} /> \r\n            <h3>Se buscara {inputValue}</h3>\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","const API_KEY='2vvv5c6ZhXIOqwnlIF6D3WsA6LLkC79b';\r\nconst N_RESULTS='9'\r\n\r\nexport const getGifs = async(category) =>{\r\n\r\n        \r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${N_RESULTS}&api_key=${API_KEY}`;\r\n\r\n        const resp = await fetch(url);\r\n        const {data}= await resp.json();\r\n\r\n        const gifs= data.map(img=>{\r\n            return{\r\n                id:img.id,\r\n                title:img.title,\r\n                url:img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        \r\n        return gifs;\r\n\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={id}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React/*, { useEffect, useState }*/ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n//    const [images, setImages]=useState([])\r\n\r\n\r\n\r\n\r\n    const { data:images,loading}  = useFetchGifs(category)\r\n    \r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => {\r\n                        return <GifGridItem \r\n                        key={img.id} \r\n                        {...img} \r\n                        />\r\n                    })\r\n                }\r\n          \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n\r\nexport const useFetchGifs=(category)=>{\r\n\r\n\r\n    const [state, setState] = useState({\r\n\r\n        data:[],\r\n        loading:true\r\n    })\r\n\r\n     useEffect(()=>{\r\n       getGifs(category)\r\n       .then(imgs=>{\r\n\r\n        setTimeout(()=>{\r\n            setState({\r\n                data:imgs,\r\n                loading:false\r\n            })\r\n        }\r\n           ,3000\r\n        )\r\n           \r\n       })\r\n    },[category])\r\n\r\n  \r\n\r\n    return state;\r\n}","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifFinderApp = () => {\r\n\r\n    //const categories=['Anime','Crypto','Rock']\r\n    const [categories,setCategories]=useState(['Saitama'])\r\n\r\n  // const handleAdd =()=>{\r\n   //     categories.push('Software');\r\n    //    setCategories([...categories, 'Software'])\r\n    //    setCategories((cats)=>[...cats,'Software'])\r\n    //    console.log(categories)\r\n   // }\r\n    console.log(categories)\r\n    return (\r\n        <>\r\n            <h2>Gif Finder App</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            \r\n            <hr />\r\n            \r\n            <ol>\r\n                { \r\n                    categories.map((category)=>(\r\n                        <GifGrid \r\n                        category={category}\r\n                        key={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifFinderApp } from './GifFinderApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifFinderApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}